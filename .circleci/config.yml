version: 2.1

executors:
  docker-node:
    docker:
      - image: qlik/node-build
    working_directory: ~/dist-flow-charts
  browser-node:
    # Available images https://hub.docker.com/r/circleci/node/tags/
    docker:
      - image: circleci/node:14.18.2-browsers
    working_directory: ~/dist-flow-charts

commands:
  use_workspace:
    steps:
      - attach_workspace:
          at: ~/dist-flow-charts
  setup_write_access:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "d3:8b:35:a0:d4:6c:eb:76:68:1d:c1:48:27:7b:81:37"

jobs:
  install:
    executor: docker-node
    steps:
      - checkout
      - restore_cache:
          key: v2-yarn-deps-{{ checksum "yarn.lock" }}
      - run: yarn install --frozen-lockfile
      - save_cache:
          key: v2-yarn-deps-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - store_artifacts:
          path: package.json

      - persist_to_workspace:
          root: ~/dist-flow-charts
          paths:
            - .

  build:
    executor: docker-node
    steps:
      - use_workspace
      - run:
          name: Build packages
          command: |
            set +e
            NODE_ENV=production yarn run build --concurrency 2
            yarn run sense --concurrency 2
      - persist_to_workspace:
          root: ~/dist-flow-charts
          paths:
            - charts/*/dist

  lint:
    executor: docker-node
    steps:
      - use_workspace
      - run: npm run lint

  test-unit:
    executor: docker-node
    steps:
      - use_workspace
      - run:
          # Uses version stored in test/cc-bin to remove risk on foreign injection
          name: Run unit tests and publish to codeclimate
          command: |
            ./test/cc-bin/cc-test-reporter before-build
            yarn test:unit --ci --runInBand --reporters=default --reporters=jest-junit --coverage
            ./test/cc-bin/cc-test-reporter after-build --coverage-input-type lcov --exit-code $?
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
      - store_artifacts:
          path: coverage

  test-rendering:
    working_directory: ~/dist-flow-charts
    docker:
      - image: circleci/node:16.10.0-browsers
      - image: mcr.microsoft.com/playwright:focal
    steps:
      - attach_workspace:
          at: ~/dist-flow-charts
      - run:
          name: Install Playwright
          command: |
            npx playwright install
      - run: yarn run test:rendering
      - store_test_results:
          path: ./test/rendering/reports/xml/report.xml
      - store_artifacts:
          path: ./test/rendering/suites
      - store_artifacts:
          path: ./test/rendering/reports/html

  test-integration:
    working_directory: ~/dist-flow-charts
    docker:
      - image: circleci/node:16.10.0-browsers
      - image: mcr.microsoft.com/playwright:focal
    steps:
      - attach_workspace:
          at: ~/dist-flow-charts
      - run:
          name: Install Playwright
          command: |
            npx playwright install
      - run: yarn run test:integration
      - store_test_results:
          path: ./test/integration/reports/xml/report.xml
      - store_artifacts:
          path: ./test/integration/suites
      - store_artifacts:
          path: ./test/integration/reports/html

  publish-dev:
    executor: docker-node
    steps:
      - use_workspace
      - run:
          name: Build extensions
          command: |
            set +e
            NODE_ENV=production yarn run sense --concurrency 2
      - run: mkdir SenseExtensions
      - run: ./scripts/zip-extensions.sh
      - store_artifacts:
          path: ./SenseExtensions

  verify-specs:
    executor: docker-node
    steps:
      - use_workspace
      - run:
          name: Verify that the spec are updated
          command: |
            yarn run specs
            git diff --exit-code --stat;

  api-governance:
    machine:
      image: ubuntu-2004:current
    working_directory: ~/dist-flow-charts
    steps:
      - use_workspace
      - run:
          name: Qlik docker login
          command: echo $DOCKER_TOKEN | docker login -u "$DOCKER_USER" --password-stdin
      - run:
          name: API Governance Setup
          command: |
            docker pull ghcr.io/qlik-download/api-compliance
            docker create -v /specs --name specs alpine:3.4 /bin/true
      - run:
          name: API Governance Boxplot Properties
          command: |
            ./.circleci/api-gov.sh ./charts/boxplot/api-specifications/properties.json '/specs/properties.json' 77c6e2c9-3317-4c71-8d0b-cb05cb3882fc './charts/boxplot/package.json'
      - run:
          name: API Governance Distplot Properties
          command: |
            ./.circleci/api-gov.sh ./charts/distributionplot/api-specifications/properties.json '/specs/properties.json' 05b40971-ad90-4cd9-a15f-43297ff987ed './charts/distributionplot/package.json'
      - run:
          name: API Governance Histogram Properties
          command: |
            ./.circleci/api-gov.sh ./charts/histogram/api-specifications/properties.json '/specs/properties.json' 401f0fab-a7f3-4a76-8a47-cb8161bf5290 './charts/histogram/package.json'
      - run:
          name: API Governance Waterfall Properties
          command: |
            ./.circleci/api-gov.sh ./charts/waterfallchart/api-specifications/properties.json '/specs/properties.json' 6b828473-c3d7-4149-90db-cd908e9ee765 './charts/waterfallchart/package.json'

  install_build_auto:
    executor: docker-node
    steps:
      - checkout
      - setup_write_access
      - run:
          name: Setup git user
          command: |
            git config user.email "auto-merger@qlik.com"
            git config user.name "release-script"
      - run:
          name: Prepare release
          command: |
            set -e
            ./.circleci/prepare-release.sh
            # log output
            cat ENV.tmp
            # store in BASH_ENV which CIRCLE_CI sources between every *run step*
            cat ENV.tmp >> $BASH_ENV
      - run:
          name: Checkout branch
          command: |
            set -e
            git checkout "$DIST_FLOW_BRANCH"
            git reset --hard "$CIRCLE_SHA1"
      - save_cache:
          key: know-hosts-{{ .Revision }}
          paths:
            - ~/.ssh/known_hosts
      - restore_cache:
          key: v2-yarn-deps-{{ checksum "yarn.lock" }}
      - run: yarn install --frozen-lockfile
      - run:
          name: Cut version
          command: ./scripts/version.sh
      - run:
          name: Log auto release
          command: ./.circleci/log.sh
      - run:
          name: Build packages
          command: |
            set -e
            NODE_ENV=production yarn run build --concurrency 2
      - run:
          name: Remove tag trigger
          command: git push origin :refs/tags/$CIRCLE_TAG
          when: on_fail
      - persist_to_workspace:
          root: ~/dist-flow-charts
          paths:
            - .

  publish:
    executor: docker-node
    steps:
      - use_workspace
      - setup_write_access
      - restore_cache:
          key: know-hosts-{{ .Revision }}
      - run:
          name: Source DIST_FLOW environment variables
          command: cat ENV.tmp >> $BASH_ENV
      - run:
          name: Setup publish access
          command: |
            set -eo pipefail
            # Amend auth token for access to public npm registry for @nebula.js packages
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

      # for some odd reason git will push the tags even if the commit can't be pushed
      # so we do a dry-run push first to make sure it's possible to push the commit
      - run: git push origin -n $DIST_FLOW_BRANCH
      - run: git push origin --follow-tags $DIST_FLOW_BRANCH
      - run:
          name: Publish packages
          command: ./.circleci/publish.sh
      - run:
          name: Remove tag trigger
          command: git push origin :refs/tags/$DIST_FLOW_TAG_TRIGGER
          when: always

workflows:
  build-all:
    jobs:
      - install
      - build:
          requires:
            - install
      - lint:
          requires:
            - install
      - test-unit:
          requires:
            - install
      - verify-specs:
          requires:
            - install
      - publish-dev:
          requires:
            - build
      - test-rendering:
          requires:
            - build
      - test-integration:
          requires:
            - build
      - api-governance:
          context: api-compliance
          requires:
            - verify-specs

  trigger_release:
    jobs:
      - install_build_auto:
          filters: &filter_auto_release
            branches:
              ignore: /.*/
            tags:
              only: /^trigger-(pre)?release(-minor)?$/
      - lint:
          filters: *filter_auto_release
          requires:
            - install_build_auto
      - test-unit:
          filters: *filter_auto_release
          requires:
            - install_build_auto
      - test-rendering:
          filters: *filter_auto_release
          requires:
            - install_build_auto
      - test-integration:
          filters: *filter_auto_release
          requires:
            - install_build_auto
      - publish:
          filters: *filter_auto_release
          requires:
            - install_build_auto
            - lint
            - test-unit
            - test-rendering
            - test-integration
